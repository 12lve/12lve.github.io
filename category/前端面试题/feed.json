{
    "version": "https://jsonfeed.org/version/1",
    "title": "Xhaonan's blog • All posts by \"前端面试题\" category",
    "description": "事了拂衣去，深藏功与名",
    "home_page_url": "https://12lve.github.io",
    "items": [
        {
            "id": "https://12lve.github.io/2023/02/17/web/",
            "url": "https://12lve.github.io/2023/02/17/web/",
            "title": "前端面试题--vue篇",
            "date_published": "2023-02-17T06:24:58.000Z",
            "content_html": "<p>一、Vue 基础</p>\n<ol>\n<li>\n<p>Vue 的基本原理<br>\n当一个 Vue 实例创建时，Vue 会遍历 data 中的属性，用 Object.defineProperty（vue3.0 使用 proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p>\n   <span id=\"more\"></span>\n</li>\n<li>\n<p>双向数据绑定的原理<br>\n Vue.js 是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty () 来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>\n主要分为以下几个步骤： 1. 需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化<br>\n 2.compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图<br>\n 3.Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是: ① 在自身实例化时往属性订阅器 (dep) 里面添加自己 ② 自身必须有一个 update () 方法 ③ 待属性变动 dep.notice () 通知时，能调用自身的 update () 方法，并触发 Compile 中绑定的回调，则功成身退。<br>\n4.MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化 (input) -&gt; 数据 model 变更的双向绑定效果。</p>\n</li>\n<li>\n<p>使用 Object.defineProperty () 来进行数据劫持有什么缺点？<br>\n在对一些属性进行操作时，使用这种方法无法拦截，比如通过下标方式修改数组数据或者给对象新增属性，这都不能触发组件的重新渲染，因为  Object.defineProperty  不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。</p>\n</li>\n<li>\n<p>v-if、v-show、v-html 的原理<br>\n v-if 会调用 addIfCondition 方法，生成 vnode 的时候会忽略对应节点，render 的时候就不会渲染；<br>\nv-show 会生成 vnode，render 的时候也会渲染成真实节点，只是在 render 过程中会在节点的属性中修改 show 属性值，也就是常说的 display；<br>\nv-html 会先移除节点下的所有节点，调用 html 方法，通过 addProp 添加 innerHTML 属性，归根结底还是设置 innerHTML 为 v-html 的值。</p>\n</li>\n<li>\n<p>v-if 和 v-show 的区别<br>\n手段：v-if 是动态的向 DOM 树内添加或者删除 DOM 元素；v-show 是通过设置 DOM 元素的 display 样式属性控制显隐；<br>\n编译过程：v-if 切换有一个局部编译 / 卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show 只是简单的基于 css 切换；<br>\n编译条件：v-if 是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译；v-show 是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且 DOM 元素保留；<br>\n性能消耗：v-if 有更高的切换消耗；v-show 有更高的初始渲染消耗；<br>\n使用场景：v-if 适合运营条件不大可能改变；v-show 适合频繁切换。</p>\n</li>\n<li>\n<p>data 为什么是一个函数而不是对象<br>\n Vue 组件可能存在多个实例，如果使用对象形式定义 data，则会导致它们共用一个 data 对象，那么状态变更将会影响所有组件实例，这是不合理的；采用函数形式定义，在 initData 时会将其作为工厂函数返回全新 data 对象，有效规避多实例之间状态污染问题。而在 Vue 根实例创建过程中则不存在该限制，也是因为根实例只能有一个，不需要担心这种情况。</p>\n</li>\n<li>\n<p>对 SSR 的理解<br>\n SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端<br>\n SSR 的优势：<br>\n① 更好的 SEO<br>\n② 首屏加载速度更快<br>\n SSR 的缺点：<br>\n① 开发条件会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子；<br>\n② 当需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境；<br>\n③ 更多的服务端负载。</p>\n</li>\n</ol>\n",
            "tags": [
                "web"
            ]
        }
    ]
}